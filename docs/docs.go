// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "openapi": "3.0.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
	"servers": [
    	{
      		"url": "{protocol}://{server_host}:{port}/{api_version}",
      		"variables": {
			  "protocol": {
				"enum": [
      		      "https",
				  "http"
      		    ],
      		    "default": "http"
			  },
      		  "server_host": {
      		    "default": "192.168.43.187",
      		    "description": "desc"
      		  },
      		  "port": {
      		    "enum": [
      		      "8080"
      		    ],
      		    "default": "8080"
      		  },
      		  "api_version": {
      		    "default": "v1"
      		  }
      		}
		}
  	],
    "paths": {
        "/configuration": {
            "get": {
                "description": "get all configurations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get all configurations",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "BAD request!",
                        "schema": {
                            "$ref": "#/definitions/web.APIError"
                        }
                    },
                    "404": {
                        "description": "Can not find",
                        "schema": {
                            "$ref": "#/definitions/web.APIError"
                        }
                    }
                }
			},
			"delete": {
                "description": "delete configurations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
				"parameters": [
                    {
                        "type": "array",
                        "description": "request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
						"example": "[1,2,3]"
                    }
                ],
                "summary": "Get all configurations",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "BAD request!",
                        "schema": {
                            "$ref": "#/definitions/web.APIError"
                        }
                    },
                    "404": {
                        "description": "Can not find",
                        "schema": {
                            "$ref": "#/definitions/web.APIError"
                        }
                    }
                }
            }
        },
		"/configuration/{id}": {
			"delete": {
                "description": "delete configurations by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "delete configuration by id",
				"parameters": [
                    {
                        "type": "integer",
                        "description": "configuration ID",
                        "name": "id",
                        "in": "path",
                        "required": true,
						"example": 4
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "BAD request!",
                        "schema": {
                            "$ref": "#/definitions/web.APIError"
                        }
                    },
                    "404": {
                        "description": "Can not find",
                        "schema": {
                            "$ref": "#/definitions/web.APIError"
                        }
                    }
                }
            },
            "get": {
                "description": "get configurations by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get configuration by id",
				"parameters": [
                    {
                        "type": "integer",
                        "description": "configuration ID",
                        "name": "id",
                        "in": "path",
                        "required": true,
						"example": 4
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "BAD request!",
                        "schema": {
                            "$ref": "#/definitions/web.APIError"
                        }
                    },
                    "404": {
                        "description": "Can not find",
                        "schema": {
                            "$ref": "#/definitions/web.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "web.APIError": {
            "type": "object",
            "properties": {
                "errorCode": {
                    "type": "integer"
                },
                "errorMessage": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Schemes:     []string{},
	Title:       "SIEM data producer data model",
	Description: "This utility can be used to produce data for multiple channels",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
